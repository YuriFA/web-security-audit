# -*- coding: utf-8 -*-

from .xss import xss
from .hpp import hpp
from .sql_error import sql_error
from .sql_blind import sql_blind
from .csrf import csrf
from .crlf import crlf
from .lfi import lfi
from .directory_listing import directory_listing
from .breach import breach
from .clickjack import clickjack
from .cookiescan import cookiescan

ATTACK_TYPES = {
    'xss': 'Cross-Site Scripting (XSS)',
    'xss_file': 'Remote file inclusion XSS',
    'hpp': 'HTTP Parameter Pollution',
    'breach': 'Breach',
    'clickjack': 'Clickjack',
    'cookiescan': 'Implicit Cacheable Cookies',
    'crlf': 'Carriage Return Line Feed',
    'csrf': 'Cross-Site Request Forgery',
    'directory_listing': 'Directory listing',
    'lfi': 'Local File Inclusion',
    'sql_blind': 'SQL Blind',
    'sql_error': 'SQL Error',
    'cms_vuln': 'CMS Vulnerability'
}

ATTACK_INFO = {
    'xss': {
        'name': 'Cross-Site Scripting (XSS)',
        'description': 'Межсайтовый скритинг (XSS) - это тип уязвимости программного обеспечения, свойственный Web-приложениям (путем обхода ограничений безопасности браузера)», который позволяет атакующему внедрить клиентский сценарий в web-страницы, просматриваемые другими пользователями. Уязвимость межсайтового скриптинга может использоваться атакующим для обхода таких механизмов безопасности как политика единства происхождения.',
        'recomendations': 'Используйте экранирование входных\выходных данных. Установите флаг HttpOnly. Этот Флаг делает клиентские куки недоступными через языки сценариев, такие как JavaScript.',
        'severity': 'Высокий',
    },
    'xss_file': {
        'name': 'Remote file inclusion XSS',
        'description': 'Remote file inclusion это возможность выполнения удаленного файла на атакуемом сервере в 100% случаев приводит к взлому сайта. Эксплуатируя RFI (Remote file include) уязвимость, злоумышленник получает доступ к серверу атакуемого сайта, размещая на нем веб-шеллы, или любой другой вредоносный код. В большинстве случаев, RFI сразу используется для получения веб-шелла на атакуемом сервере.',
        'recomendations': 'Отредактируйте исходный код, чтобы проверить правильность ввода. Где это возможно, рекомендуется сделать список принятых имен файлов и ограничить ввод в этот список. Для PHP опция allow_url_fopen обычно позволяет программисту открывать, включать или иным образом использовать удаленный файл, используя URL, а не путь к локальному файлу. Рекомендуется отключить эту опцию из php.ini.',
        'severity': 'Высокий',
    },
    'hpp': {
        'name': 'HTTP Parameter Pollution',
        'description': 'Атаки HPP состоят из введения закодированных разделителей строки запроса в другие существующие параметры. Если веб-приложение не выполняет надлежащую очистку пользовательского ввода, вредоносный пользователь может скомпрометировать логику приложения для выполнения либо клиентских, либо серверных атак.',
        'recomendations': 'Приложение должно должным образом валидировать ввод пользователя (URL-кодирование) для защиты от этой уязвимости.',
        'severity': 'Высокий',
    },
    'breach': {
        'name': 'Breach',
        'description': 'BREACH или Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext является уязвимостью безопасности в отношении HTTPS при использовании сжатия HTTP. Для осуществления BREACH атаки злоумышленник должен иметь возможность перехвата сетевого трафика жертвы. Это может быть осуществлено посредством Wi-Fi сети, или через доступ к оборудованию Интернет-провайдера. Атакующему также потребуется обнаружить уязвимую часть приложения, принимающую входные данные посредством URL параметров, и возвращающую эти данные в зашифрованном ответе. Злоумышленник может заставит клиентское приложение отправить большое количество запросов и, таким образом, угадать все символы аутентификационного токена.',
        'recomendations': 'Рекомендуется: отключение сжатия HTTP, разделение секретов от пользовательского ввода, рандомизация секретов по запросу, секреты маскирования, защита уязвимых страниц с помощью CSRF токенов, ограничение частоты запросов',
        'severity': 'Средний',
    },
    'clickjack': {
        'name': 'Clickjacking',
        'description': 'Clickjacking — механизм обмана пользователей интернета, при котором злоумышленник может получить доступ к конфиденциальной информации или даже получить доступ к компьютеру пользователя, заманив его на внешне безобидную страницу или внедрив вредоносный код на безопасную страницу.',
        'recomendations': 'Необходима отправка правильных заголовков X-Frame-Options в HTTP-ответе, которые инструктируют браузер не допускать iframe с других доменов. Использование защитного кода в пользовательском интерфейсе для обеспечения того, чтобы текущий frame был самым верхним уровнем окна',
        'severity': 'Низкий',
    },
    'cookiescan': {
        'name': 'Implicit Cacheable Cookies',
        'description': '',
        'recomendations': 'Установите кэш в параметрах куки, или установите в HTTP-заголовке Cache-control: no-cache, no-store, must-revalidate.',
        'severity': 'Средний',
    },
    'crlf': {
        'name': 'Carriage Return Line Feed',
        'description': 'CRLF, или Carriage Return Line Feed, относится к тому типу уязвимостей, которые происходят, когда юзер вставляет CRLF в приложение. Символы CRLF означают конец строки для множества интернет-протоколов, включая HTML, и выглядят как %0D%0A, что декодируется в rn. Они могут быть использованы для обозначения переноса строк и в сочетании с заголовками HTTP-запросов и ответов могут приводить к различным уязвимостям, включая HTTP Request Smuggling и HTTP Response Splitting.',
        'recomendations': 'Необходимо ограничить CR (0x13) и LF (0x10) от пользовательского ввода или правильно закодировать вывод, чтобы предотвратить внедрение пользовательских HTTP-заголовков.',
        'severity': 'Средний',
    },
    'csrf': {
        'name': 'Cross-Site Request Forgery',
        'description': 'CSRF — вид атак на посетителей веб-сайтов, использующий недостатки протокола HTTP. Если жертва заходит на сайт, созданный злоумышленником, от её лица тайно отправляется запрос на другой сервер (например, на сервер платёжной системы), осуществляющий некую вредоносную операцию (например, перевод денег на счёт злоумышленника). Для осуществления данной атаки, жертва должна быть авторизована на том сервере, на который отправляется запрос, и этот запрос не должен требовать какого-либо подтверждения со стороны пользователя, который не может быть проигнорирован или подделан атакующим скриптом.',
        'recomendations': 'Убедитесь, что эта форма требует защиты CSRF и при необходимости применяет контрмеры CSRF.',
        'severity': 'Средний',
    },
    'directory_listing': {
        'name': 'Directory listing',
        'description': 'Листинг каталогов - это функция веб-сервера, которая отображает список всех файлов, если в определенном каталоге веб-сайта нет индексного файла, например, index.php и default.asp.',
        'recomendations': 'Прежде всего, убедитесь, что вы установили последнюю версию своего программного обеспечения веб-сервера и убедитесь, что все исправления были применены. Во-вторых, необходимо эффективно фильтровать любые пользовательские данные. В идеале удалите все, кроме известных полезных данных, и отфильтруйте метасимволы из ввода пользователя.',
        'severity': 'Средний',
    },
    'lfi': {
        'name': 'Local File Inclusion',
        'description': 'LFI - это возможность использования и выполнения локальных файлов на серверной стороне. Уязвимость позволяет удаленному пользователю получить доступ с помощью специально сформированного запроса к произвольным файлам на сервере, в том числе содержащую конфиденциальную информацию.',
        'recomendations': 'Отредактируйте исходный код, чтобы проверить правильность ввода. Где это возможно, рекомендуется сделать список принятых имен файлов и ограничить ввод в этот список. Для PHP опция allow_url_fopen обычно позволяет программисту открывать, включать или иным образом использовать удаленный файл, используя URL, а не путь к локальному файлу. Рекомендуется отключить эту опцию из php.ini.',
        'severity': 'Высокий',
    },
    'sql_blind': {
        'name': 'SQL Blind',
        'description': 'Этот страница, возможно, уязвима для атак SQL Injection. Внедрение SQL - это уязвимость, позволяющая злоумышленнику изменять внутренние SQL-операторы путем манипулирования пользовательским вводом. Внедрение SQL происходит, когда веб-приложения принимают ввод пользователя, который непосредственно помещается в оператор SQL и не фильтрует опасные символы должным образом. Это одна из наиболее распространенных атак прикладного уровня, используемых в настоящее время в Интернете. Несмотря на то, что относительно легко защититься, существует большое количество уязвимых веб-приложений.',
        'recomendations': 'Ваш сценарий должен фильтровать метасимволы от пользовательского ввода. Подробные сведения см. В статье «Исправление этой уязвимости».',
        'severity': 'Высокий',
    },
    'sql_error': {
        'name': 'SQL Error',
        'description': 'Эта страница содержит сообщение об ошибке / предупреждении базы данных, которое может раскрыть конфиденциальную информацию. Сообщение также может содержать местоположение файла, в котором возникло необработанное исключение.',
        'recomendations': 'Просмотрите исходный код на наличие вывода информации об ошибках.',
        'severity': 'Средний',
    },
    'cms_vuln': {
        'name': 'CMS Vulnerability',
        'description': '',
        'recomendations': '',
        'severity': '',
    },
}

def all_attacks():
    return [xss, hpp, sql_error, sql_blind, csrf, crlf, lfi, directory_listing, breach, clickjack, cookiescan]
    # return [xss]
    # return [xss, hpp, sql_error, csrf, crlf, lfi, directory_listing, breach, clickjack, cookiescan]
